package test.jdbc;

import com.zaxxer.hikari.HikariDataSource;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import test.container.ContainerUtil;
import test.container.JdbcTest;

import javax.sql.DataSource;
import java.sql.*;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class StatementTest {

  private final static Logger log = LoggerFactory.getLogger(StatementTest.class);

  @TestFactory
  List<DynamicTest> testAllDatabase() {
    return ContainerUtil.testAllContainers(() -> List.of(
      JdbcTest.of("execute", this::execute),
      JdbcTest.of("executeUpdate", this::executeUpdate)
    ));
  }

  void execute(DataSource dataSource) throws SQLException {
    String driverClassName = dataSource.unwrap(HikariDataSource.class).getDriverClassName();

    // 不指定autoGeneratedKeys, 无法获得生成的key(mysql的实现会抛出异常, 所以统一成必须指定)
    try (Connection connection = dataSource.getConnection()) {
      String sql = "insert into swift_user(name, status) values(?, ?)";
      try (PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
        ps.setQueryTimeout(1);
        ps.setString(1, "fantasy");
        ps.setInt(2, 1);
        // 没有返回内容(不包括生成的主键), 所以是false
        assertFalse(ps.execute());
        try (ResultSet resultSet = ps.getGeneratedKeys()) {
          assertTrue(resultSet.next());
          log.debug("key: {}", resultSet.getLong(1));
        }
      }
    }

    // pg专场
    if (driverClassName.contains("postgresql")) {
      // 不设置Statement.RETURN_GENERATED_KEYS, 可以获取returning的内容
      try (Connection connection = dataSource.getConnection()) {
        String sql = "insert into swift_user(name, status) values(?, ?) returning id, name";
        try (PreparedStatement ps = connection.prepareStatement(sql)) {
          ps.setQueryTimeout(1);
          ps.setString(1, "fantasy");
          ps.setInt(2, 1);
          // 在指定autoGeneratedKeys的情况下, 就算有returning, 也会返回false
          assertTrue(ps.execute());
          try (ResultSet resultSet = ps.getGeneratedKeys()) {
            assertFalse(resultSet.next());
          }
          try (ResultSet resultSet = ps.getResultSet()) {
            assertTrue(resultSet.next());
            long id = resultSet.getLong(1);
            String name = resultSet.getString(2);
            log.debug("id: {}, name: {}", id, name);
            assertTrue(id > 0);
            assertEquals("fantasy", name);
          }
        }
      }
      // 设置Statement.RETURN_GENERATED_KEYS, returning的内容将被忽略
      try (Connection connection = dataSource.getConnection()) {
        String sql = "insert into swift_user(name, status) values(?, ?) returning id";
        try (PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
          ps.setQueryTimeout(1);
          ps.setString(1, "fantasy");
          ps.setInt(2, 1);
          // 在指定autoGeneratedKeys的情况下, 就算有returning, 也会返回false
          assertFalse(ps.execute());
          try (ResultSet resultSet = ps.getGeneratedKeys()) {
            assertTrue(resultSet.next());
            log.debug("key: {}", resultSet.getLong(1));
          }
          assertNull(ps.getResultSet());
        }
      }
    }
  }

  void executeUpdate(DataSource dataSource) throws SQLException {
    String driverClassName = dataSource.unwrap(HikariDataSource.class).getDriverClassName();
    if (driverClassName.contains("postgresql")) {
      // returning的结果只能通过execute方法获取
    }
    try (Connection connection = dataSource.getConnection()) {
      String sql = "insert into swift_user(name, status) values(?, ?)";
      try (PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
        ps.setQueryTimeout(1);
        ps.setString(1, "fantasy");
        ps.setInt(2, 1);
        assertEquals(1, ps.executeUpdate());
        assertNull(ps.getResultSet());
        try (ResultSet resultSet = ps.getGeneratedKeys()) {
          assertTrue(resultSet.next());
          long id = resultSet.getLong(1);
          log.debug("key: {}", id);
          assertTrue(id > 0);
        }
      }
    }
  }

}
